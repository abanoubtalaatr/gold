<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use App\Services\{{ class }}Service;
use App\Http\Requests\Store{{ class }}Request;
use App\Http\Requests\Update{{ class }}Request;
use Illuminate\Http\Request;
use Inertia\Inertia;

class {{ class }} extends Controller
{
    protected ${{ modelVariable }}Service;

    public function __construct({{ class }}Service ${{ modelVariable }}Service)
    {
        $this->{{ modelVariable }}Service = ${{ modelVariable }}Service;
        
        // Permission middleware
        $this->middleware('permission:read {{ modelPlural }}', ['only' => ['index', 'show']]);
        $this->middleware('permission:create {{ modelPlural }}', ['only' => ['create', 'store']]);
        $this->middleware('permission:update {{ modelPlural }}', ['only' => ['edit', 'update']]);
        $this->middleware('permission:delete {{ modelPlural }}', ['only' => ['destroy']]);
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $filters = $request->only(['search', 'is_active', 'per_page']);
        ${{ modelVariablePlural }} = $this->{{ modelVariable }}Service->getPaginated($filters);

        return Inertia::render('{{ model }}/Index', [
            '{{ modelVariablePlural }}' => ${{ modelVariablePlural }},
            'filters' => $filters,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return Inertia::render('{{ model }}/Create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{ class }}Request $request)
    {
        try {
            ${{ modelVariable }} = $this->{{ modelVariable }}Service->create($request->validated());
            
            return redirect()
                ->route('{{ modelPlural }}.index')
                ->with('success', __('messages.data_created_successfully'));
        } catch (\Exception $e) {
            return back()
                ->withInput()
                ->with('error', __('messages.error_occurred'));
        }
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        return Inertia::render('{{ model }}/Show', [
            '{{ modelVariable }}' => $this->{{ modelVariable }}Service->getForShow(${{ modelVariable }}),
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{ model }} ${{ modelVariable }})
    {
        return Inertia::render('{{ model }}/Edit', [
            '{{ modelVariable }}' => $this->{{ modelVariable }}Service->getForEdit(${{ modelVariable }}),
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{ class }}Request $request, {{ model }} ${{ modelVariable }})
    {
        try {
            $this->{{ modelVariable }}Service->update(${{ modelVariable }}, $request->validated());
            
            return redirect()
                ->route('{{ modelPlural }}.index')
                ->with('success', __('messages.data_updated_successfully'));
        } catch (\Exception $e) {
            return back()
                ->withInput()
                ->with('error', __('messages.error_occurred'));
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        try {
            $this->{{ modelVariable }}Service->delete(${{ modelVariable }});
            
            return redirect()
                ->route('{{ modelPlural }}.index')
                ->with('success', __('messages.data_deleted_successfully'));
        } catch (\Exception $e) {
            return back()->with('error', __('messages.error_occurred'));
        }
    }

    /**
     * Toggle the status of the specified resource.
     */
    public function activate({{ model }} ${{ modelVariable }})
    {
        try {
            $this->{{ modelVariable }}Service->toggleStatus(${{ modelVariable }});
            
            return back()->with('success', __('messages.status_updated_successfully'));
        } catch (\Exception $e) {
            return back()->with('error', __('messages.error_occurred'));
        }
    }
} 