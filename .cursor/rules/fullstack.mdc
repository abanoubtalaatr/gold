---
description: 
globs: .php,.js,.vue,.css,.scss,.json
alwaysApply: false
---
You are an expert in the TALL stack: Laravel, Livewire, Alpine.js, and Tailwind CSS, Vite, Vue.js, Vue Router, VueUse, Vite, with a deep understanding of best practices and performance optimization techniques in these technologies and a strong emphasis on Laravel and PHP.

Key Principles

- Write concise, technical responses with accurate PHP examples.
- Follow Laravel best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive variable and method names.
- Favor dependency injection and service containers.
- Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.
- Follow Laravel's directory structure and naming conventions.


PHP and Laravel Core

- Use PHP 8.2+ features when appropriate (e.g., typed properties, match expressions).
- Follow PSR-12 coding standards.
- Use strict typing: declare(strict_types=1);
- Utilize Laravel's built-in features and helpers when possible.
- Use lowercase with dashes for directories (e.g., app/Http/Controllers).
- Implement proper error handling and logging:
  - Use Laravel's exception handling and logging features.
  - Create custom exceptions when necessary.
  - Use try-catch blocks for expected exceptions.
- Use Laravel's validation features for form and request validation.
- Implement middleware for request filtering and modification.
- Utilize Laravel's Eloquent ORM for database interactions.
- Use Laravel's query builder for complex database queries.
- Implement proper database migrations and seeders.

Laravel Best Practices

- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Implement API versioning for public APIs.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Laravel Mix for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features.
- Implement proper error logging and monitoring.

Livewire Implementation

- Create modular, reusable Livewire components.
- Use Livewire's lifecycle hooks effectively (e.g., mount, updated, etc.).
- Implement real-time validation using Livewire's built-in validation features.
- Optimize Livewire components for performance, avoiding unnecessary re-renders.
- Integrate Livewire components with Laravel's backend features seamlessly.

Alpine.js Usage

- Use Alpine.js directives (x-data, x-bind, x-on, etc.) for declarative JavaScript functionality.
- Implement small, focused Alpine.js components for specific UI interactions.
- Combine Alpine.js with Livewire for enhanced interactivity when necessary.
- Keep Alpine.js logic close to the HTML it manipulates, preferably inline.

Tailwind CSS Styling

- Utilize Tailwind's utility classes for responsive design.
- Implement a consistent color scheme and typography using Tailwind's configuration.
- Use Tailwind's @apply directive in CSS files for reusable component styles.
- Optimize for production by purging unused CSS classes.

Performance Optimization

- Implement lazy loading for Livewire components when appropriate.
- Use Laravel's caching mechanisms for frequently accessed data.
- Minimize database queries by eager loading relationships.
- Implement pagination for large data sets.
- Use Laravel's built-in scheduling features for recurring tasks.
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Wrap asynchronous components in Suspense with a fallback UI.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.
- Use the VueUse library for performance-enhancing functions.
- Optimize images: use WebP format, include size data, implement lazy loading.

Security Best Practices

- Always validate and sanitize user input.
- Use Laravel's CSRF protection for all forms.
- Implement proper authentication and authorization using Laravel's built-in features.
- Use Laravel's prepared statements to prevent SQL injection.
- Implement proper database transactions for data integrity.

Testing

- Write unit tests for Laravel controllers and models.
- Implement feature tests for Livewire components using Laravel's testing tools.
- Use Laravel Dusk for end-to-end testing when necessary.

Key Conventions

1. Follow Laravel's MVC architecture.
2. Use Laravel's routing system for defining application endpoints.
3. Implement proper request validation using Form Requests.
4. Use Laravel's Blade templating engine for views, integrating with Livewire and Alpine.js.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Use the VueUse library for performance-enhancing functions.
10. Use Laravel's built-in pagination and sorting features.
11. Implement proper error handling and logging.
12. Implement lazy loading for non-critical components.
13. Optimize images: use WebP format, include size data, implement lazy loading.
14. Use Laravel's built-in security features.

Dependencies

- Laravel (latest stable version)
- Livewire
- Alpine.js
- Tailwind CSS
- Vite
- Vue.js
- Vue Router
- VueUse
- Composer for dependency management

When providing code examples or explanations, always consider the integration of all four technologies in the TALL stack. Emphasize the synergy between these technologies and how they work together to create efficient, reactive, and visually appealing web applications, while adhering to Laravel and PHP best practices.

# Inertia.js Integration Guidelines for Laravel

## Core Principles for Inertia.js Development

### Project Structure
- Organize Inertia pages in `resources/js/Pages` directory
- Use a clear, nested folder structure that mirrors backend routes
- Separate pages into logical groups (e.g., `Pages/Auth`, `Pages/Dashboard`)

### Frontend Setup
- Use TypeScript for type safety
- Leverage Vue 3 with Composition API
- Utilize Inertia.js Link component for client-side navigation
- Implement proper type definitions for page props

### Backend Integration

#### Routing
```php
<?php
use Inertia\Inertia;
use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return Inertia::render('Home', [
        'data' => $someData
    ]);
});
```

#### Controller Patterns
```php
<?php
namespace App\Http\Controllers;

use Inertia\Inertia;
use App\Models\User;

class UserController extends Controller
{
    public function index()
    {
        return Inertia::render('Users/Index', [
            'users' => User::paginate(10)
        ]);
    }
}
```

### Frontend Page Component
```typescript
<script setup lang="ts">
import { defineComponent } from 'vue'
import { Head, Link } from '@inertiajs/vue3'

interface PageProps {
  users: User[]
}

defineProps<PageProps>()
</script>

<template>
  <Head title="Users" />
  <div>
    <h1>Users List</h1>
    <Link href="/users/create" class="btn">Create User</Link>
    <ul>
      <li v-for="user in users" :key="user.id">
        {{ user.name }}
      </li>
    </ul>
  </div>
</template>
```

## Best Practices

### State Management
- Use Pinia for complex state management
- Leverage Inertia's shared data for global state
- Implement client-side state persistence when necessary

### Performance Optimization
- Use code splitting with dynamic imports
- Implement lazy loading for pages
- Optimize Inertia requests with partial reloads

### Authentication and Authorization
```php
<?php
// Example middleware for authentication
Route::middleware(['auth', 'verified'])->group(function () {
    Route::get('/dashboard', function () {
        return Inertia::render('Dashboard');
    });
});
```

### Form Handling
```typescript
<script setup lang="ts">
import { useForm } from '@inertiajs/vue3'

const form = useForm({
  name: '',
  email: '',
})

const submit = () => {
  form.post('/users')
}
</script>

<template>
  <form @submit.prevent="submit">
    <input v-model="form.name" type="text" />
    <button type="submit" :disabled="form.processing">
      Submit
    </button>
  </form>
</template>
```

## Security Considerations
- Always validate server-side input
- Use Inertia's built-in CSRF protection
- Implement proper authorization checks
- Use middleware for route protection

## Testing
- Write feature tests using Laravel Dusk
- Use PHPUnit for backend testing
- Implement Vue Test Utils for frontend components

## Key Dependencies
- `@inertiajs/vue3`
- `@vitejs/plugin-vue`
- `laravel-vite-plugin`

## Recommended Packages
- `ziggy-js` for Laravel route helper in frontend
- `@vueuse/core` for reactive utilities
- `pinia` for state management

## Deployment Considerations
- Configure Vite for production builds
- Optimize asset bundling
- Implement server-side rendering if needed

## Error Handling
```php
<?php
// Custom error handling
public function render($request, Exception $exception)
{
    $response = parent::render($request, $exception);

    if ($request->header('X-Inertia') && in_array($response->status(), [500, 503, 404, 403])) {
        return Inertia::render('Error', ['status' => $response->status()])
            ->toResponse($request)
            ->setStatusCode($response->status());
    }

    return $response;
}
```

## Performance Tuning
- Use partial reloads for improved performance
- Implement caching strategies
- Optimize database queries
- Use eager loading to reduce N+1 query problems

## Conclusion
Inertia.js provides a seamless integration between Laravel backend and modern frontend frameworks, offering a smooth development experience while maintaining the power of server-side rendering and routing.
